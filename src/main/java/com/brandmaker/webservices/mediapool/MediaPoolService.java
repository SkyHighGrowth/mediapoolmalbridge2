
package com.brandmaker.webservices.mediapool;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.4-b01-
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "MediaPoolService", targetNamespace = "http://brandmaker.com/webservices/MediaPool/", wsdlLocation = "classpath:wsdl/MediaPool.wsdl")
public class MediaPoolService
    extends Service
{

    private final static URL MEDIAPOOLSERVICE_WSDL_LOCATION;
    private final static Logger logger = LoggerFactory.getLogger(com.brandmaker.webservices.mediapool.MediaPoolService.class.getName());

    static {
        URL url = null;
        try {
            URL baseUrl;
            baseUrl = com.brandmaker.webservices.mediapool.MediaPoolService.class.getResource(".");
            url = new URL(baseUrl, "classpath:wsdl/MediaPool.wsdl");
        } catch (MalformedURLException e) {
            logger.warn("Failed to create URL for the wsdl Location: 'classpath:wsdl/MediaPool.wsdl', retrying as a local file");
            logger.warn(e.getMessage());
        }
        MEDIAPOOLSERVICE_WSDL_LOCATION = url;
    }

    public MediaPoolService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public MediaPoolService() {
        super(MEDIAPOOLSERVICE_WSDL_LOCATION, new QName("http://brandmaker.com/webservices/MediaPool/", "MediaPoolService"));
    }

    /**
     * 
     * @return
     *     returns MediaPoolWebServicePort
     */
    @WebEndpoint(name = "MediaPoolPort")
    public MediaPoolWebServicePort getMediaPoolPort() {
        return super.getPort(new QName("http://brandmaker.com/webservices/MediaPool/", "MediaPoolPort"), MediaPoolWebServicePort.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns MediaPoolWebServicePort
     */
    @WebEndpoint(name = "MediaPoolPort")
    public MediaPoolWebServicePort getMediaPoolPort(WebServiceFeature... features) {
        return super.getPort(new QName("http://brandmaker.com/webservices/MediaPool/", "MediaPoolPort"), MediaPoolWebServicePort.class, features);
    }

}
