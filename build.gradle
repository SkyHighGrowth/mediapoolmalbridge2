/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    // Apply the application plugin to add support for building a CLI application
    id 'application'
	id 'idea'
	id 'org.springframework.boot' version '2.0.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.7.RELEASE'
    // build war
    id 'war'
    //id "uk.co.boothen.gradle.wsimport" version "0.10"
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
version = '0.2.20'

jar {
    manifest {
        attributes 'Main-Class' : 'MediaPoolMalBridge.App'
    }
    archiveFileName = "marriot.jar"
}


repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:28.0-jre'

    implementation 'org.springframework.boot:spring-boot-dependencies:2.0.5.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.2.1.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-web'
    // build war
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    // build war
    providedRuntime 'javax.servlet:javax.servlet-api'
    implementation 'org.springframework.boot:spring-boot-starter-mail:2.1.1.RELEASE'

    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.18'
    compile group: 'org.hibernate', name: 'hibernate-gradle-plugin', version: '5.4.9.Final'

    compile 'org.apache.httpcomponents:httpclient:4.5.3'
    compile 'org.apache.commons:commons-lang3:3.9'

    compile 'org.apache.poi:poi:3.17'
    compile 'org.apache.poi:poi-ooxml:3.17'


    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
    compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.21'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile group: 'ch.qos.logback.contrib', name: 'logback-json-classic', version: '0.1.5'
    compile group: 'ch.qos.logback.contrib', name: 'logback-jackson', version: '0.1.5'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'
    compile group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '6.2'

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.10.1'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.1'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.10.1'

    compile group: 'net.sourceforge.jexcelapi', name: 'jxl', version: '2.6.12'

    compile group: 'com.jcraft', name: 'jsch', version: '0.1.55'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

application {
    // Define the main class for the application
    mainClassName = 'MediaPoolMalBridge.App'
}

apply plugin: 'idea'
//apply plugin: 'uk.co.boothen.gradle.wsimport'
apply plugin: 'java'

configurations {
    jaxws
}

dependencies {
    jaxws 'com.sun.xml.ws:jaxws-tools:2.1.4'
}

task wsimport {
    ext.destDir = file("${projectDir}/generated-sources")
    doLast {
        ant {
            sourceSets.main.output.classesDirs.inits()
            destDir.mkdirs()
            taskdef(name: 'wsimport',
                    classname: 'com.sun.tools.ws.ant.WsImport',
                    classpath: configurations.jaxws.asPath
            )
            wsimport(keep: true,
                    sourcedestdir: 'generated-sources',
                    package: "",
                    wsdl: 'src/main/resources/wsdl/MediaPool.wsdl',
                    wsdlLocation: 'classpath:wsdl/MediaPool.wsdl') {
                xjcarg(value: "-XautoNameResolution")
            }
            wsimport(keep: true,
                    sourcedestdir: 'generated-sources',
                    package: "",
                    wsdl: 'src/main/resources/wsdl/Theme.wsdl',
                    wsdlLocation: 'classpath:wsdl/Theme.wsdl') {
                xjcarg(value: "-XautoNameResolution")
            }
        }
    }
}

compileJava {
    dependsOn wsimport
    source wsimport.destDir
}

/*task wsimport(type: uk.co.boothen.gradle.wsimport.WsImport) {

    wsdlSourceRoot = "/src/main/resources/wsdl"
    generatedSourceRoot = "/../generated-sources"
    generatedClassesRoot = ""

    keep = true
    extension = true
    verbose = false
    quiet = true
    debug = false
    xnocompile = true


    wsdl("wsdl/MediaPool.wsdl") {
        xjcarg("-XautoNameResolution")
        //packageName("brandmaker.mediapool")
        wsdlLocation("classpath:wsdl/MediaPool.wsdl")
    }

    wsdl("wsdl/Theme.wsdl") {
        xjcarg("-XautoNameResolution")
        wsdlLocation("classpath:wsdl/Theme.wsdl")
    }
}*/

sourceSets {
    main {
        java.srcDirs += "${projectDir}/generated-sources/"
    }
}

task javadocs( type: Javadoc ) {
    source = sourceSets.main.allJava
    //classpath = configurations.compile
    exclude "${projectDir}/generated-sources/"
}

// build war
war {
    enabled=true
}